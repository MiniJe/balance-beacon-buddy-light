import dotenv from 'dotenv';
dotenv.config();

import { pool, initializePool } from '../config/azure';

async function cleanupDatabaseSafe() {
    try {
        await initializePool();
        await pool.connect();
        
        console.log('üßπ √éncepere cleanup database...\n');
        
        // Pentru tabelele cu IDENTITY - putem folosi TRUNCATE
        const tabeleCuIdentity = ['JurnalDocumenteEmise'];
        
        for (const tableName of tabeleCuIdentity) {
            console.log(`üóëÔ∏è Golire tabel ${tableName} (cu IDENTITY)...`);
            
            try {
                // VerificƒÉ dacƒÉ tabelul are √ÆnregistrƒÉri
                const countResult = await pool.request().query(`SELECT COUNT(*) as total FROM ${tableName}`);
                const totalRows = countResult.recordset[0].total;
                
                if (totalRows > 0) {
                    // Folose»ôte TRUNCATE pentru resetarea IDENTITY
                    await pool.request().query(`TRUNCATE TABLE ${tableName}`);
                    console.log(`  ‚úÖ ${tableName}: ${totalRows} √ÆnregistrƒÉri »ôterse, IDENTITY resetat`);
                } else {
                    console.log(`  ‚ÑπÔ∏è ${tableName}: tabelul este deja gol`);
                }
            } catch (error) {
                console.error(`  ‚ùå Eroare la golirea ${tableName}:`, error);
            }
        }
        
        // Pentru tabelele fƒÉrƒÉ IDENTITY - folosim DELETE
        const tabeleFaraIdentity = ['JurnalEmail', 'JurnalCereriConfirmare', 'JurnalSesiuni'];
        
        for (const tableName of tabeleFaraIdentity) {
            console.log(`üóëÔ∏è Golire tabel ${tableName} (fƒÉrƒÉ IDENTITY)...`);
            
            try {
                // VerificƒÉ dacƒÉ tabelul are √ÆnregistrƒÉri
                const countResult = await pool.request().query(`SELECT COUNT(*) as total FROM ${tableName}`);
                const totalRows = countResult.recordset[0].total;
                
                if (totalRows > 0) {
                    // Folose»ôte DELETE pentru tabelele fƒÉrƒÉ IDENTITY
                    const deleteResult = await pool.request().query(`DELETE FROM ${tableName}`);
                    console.log(`  ‚úÖ ${tableName}: ${totalRows} √ÆnregistrƒÉri »ôterse`);
                } else {
                    console.log(`  ‚ÑπÔ∏è ${tableName}: tabelul este deja gol`);
                }
            } catch (error) {
                console.error(`  ‚ùå Eroare la golirea ${tableName}:`, error);
            }
        }
        
        console.log('\nüéâ Cleanup database complet!');
        
        // VerificƒÉ rezultatele finale
        console.log('\nüìä Status final tabele:');
        const allTables = [...tabeleCuIdentity, ...tabeleFaraIdentity];
        
        for (const tableName of allTables) {
            try {
                const countResult = await pool.request().query(`SELECT COUNT(*) as total FROM ${tableName}`);
                const totalRows = countResult.recordset[0].total;
                console.log(`  ${tableName}: ${totalRows} √ÆnregistrƒÉri`);
            } catch (error) {
                console.log(`  ${tableName}: eroare la verificare`);
            }
        }
        
        await pool.close();
        
    } catch (error) {
        console.error('‚ùå Eroare la cleanup database:', error);
    }
}

cleanupDatabaseSafe().catch(console.error);
